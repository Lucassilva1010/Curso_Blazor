@page "/"
@inject HttpClient http
@using Microsoft.CSharp

<h3>Index de Tarefas</h3>

    @if (tarefas== null){
    <p>Carregando tarefas... </p>
}else if (!tarefas.Any())
{
    <p> Ainda não existem tarefas para serem exibidas! </p>
}
else
{
    
    <table>
        <thead>
            <tr>

                <th>Ação</th>
                <th>Data</th>
                <th>Descricão</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>

        @foreach (var item in tarefas)
        {
            <tr>
                <td><button @onclick="@(()=> RemoveTarefa(item.Id))"><i class="oi oi-trash"></i> </button></td>
                <td>@item.DataDescricao</td>
                <td>@item.Descricao</td>
                <td><input type="checkbox" @bind="item.Concluida">@item.Concluida</td>
            </tr>
        }
        </tbody>
    </table>
}
@if (tarefas!=null)
{
    <div class="form-group">
        <br/>
        <label>Nova Tarefa</label>
        <input type="text" placeholder="Informe a Tarefa" @bind="novaTarefa">
        <button class="btn btn-primary" @onclick="AdicionaNovaTarefa">Resgistrar Tarefa</button> 
    </div>
}

@code {

    protected override async Task OnInitializedAsync()
    {
        tarefas = await http.GetFromJsonAsync<List<Tarefa>>("Dados/Tarefa.json");
    }
    public class Tarefa
    {
        public Guid Id { get; set; }
        public string Descricao { get; set; }
        public bool Concluida { get; set; }

        public DateTime DataDescricao { get; set; }
    }
    private string novaTarefa = " ";

    private IList<Tarefa> tarefas = new List<Tarefa>();

    private void AdicionaNovaTarefa()
    {
        if (!string.IsNullOrWhiteSpace(novaTarefa))
        {
            tarefas.Add(new Tarefa
                {
                    Descricao = novaTarefa,
                    DataDescricao = DateTime.Now,
                    Id = Guid.NewGuid()
                });
            novaTarefa = "";
        }
    }

    private void RemoveTarefa(Guid id)
    {
        tarefas.Remove(tarefas.First(x=> x.Id==id));
    }
}
